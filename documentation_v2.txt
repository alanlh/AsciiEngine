---Classes---
Layer [Abstract]
  => Scene
  => Element [Abstract]: Internal structures with key fields immutable
    => ContainerLayer: Contains Elements, which are all displayed
    => ConfigurationLayer: Contains multiple Elements, of which one is displayed at a time. 
    => BaseLayer [Abstract]: Contains immutable text, but configurable formatting, etc.
      => TextLayer: Standard ascii drawing text. Completely immutable (?)
        => TextBox: Extension of TextLayer with wrapping options. For normal text. 
      => HTMLObject: A (base?) class for all non-text-only objects (e.g. buttons, input, etc.)
      
Modules: 
Objects to hold mutable information. Each layer can hold any of these modules (although at most one of each). 
BaseModule [Abstract]: Base class holding information about the parent Layer. 
  => CoreModule: Holds key rendering information.
  => EventsModule: Holds the event listeners attached to each object. 
  => EventHandlerModule: Holds event handlers for Scene. 
  => [NOT IMPLEMENTED] UserDataModule: For the user. 
  => [NOT IMPLEMENTED] PhysicsModule: Eventual 2D physics information???????? (Think platformer). 

PixelData: Structure to store the information to be displayed by scene. 
  - FormattingSelection: Structure containing formatting options to be rendered 
  
Parse: Collection of methods to build Layers from a .txt file

Vector2: Simple immutable x,y pair

LOGGING: Utility class for logging. 


Layer [Abstract]:
  Base AsciiEngine object.
  Members:
    public const Vector2 boundingBoxDimens: Size of the bounding box
    public const String id: The id of the object, for internal use only. 
    [NOT IMPLEMENTED] private bool changedSinceLastRender: [Not yet implemented]
  Methods:
    Constructor(data):
      data [REQUIRED]: 
        Vector2 boundingBoxDimens [REQUIRED]: The width and height of the layer.
    public abstract char getCharAt(Vector2): Returns the char at that point. Returns false if no valid char to return.
    public abstract PixelData getPixelDataAt(Vector2): returns a PixelData object containing rendering information at that point.
    public static const String generateId(): Attaches an id to the Layer. 
    MODULES:
      Accessed via this[<ModuleClass>.type]. Returns the requested module. 
      Not copied when copy is called. 
      [NOT IMPLEMENTED] Returns an empty module if does not exist for that Layer.
    
Scene:
  Associated with a div element with render methods. Contains Elements. 
  NOTE: Can no longer change dimensions
  Members:
    private 2D Array _domElementReferences: References the DOM elements belonging to the Scene
    private map _elementData: Maps from ids to contained Elements.
    private map _idTags: Maps from ids to the class list for each id.
    private map _classMembers: Map from each class to the ids in that class.
  Methods: 
    Constructor(data):
      data:
        String divId: The id of the DIV which the Scene is attached to.
        Vector2 dimens: Size of the scene (accessed as boundingBoxDimens)
    privileged addElement(classSet, element): Adds an element to the Scene.
      NOTE: classSet can either be a space-separated string, an array, or Set. 
    private filterElements(classSet): Returns the ids of all elements which contain all of the classes in classSet.
      Returns list of all ids if classSet is empty.
    privileged shiftElements(classSet, Vector2 shift): Shifts all filtered classes by amount specified in shift. 
    privileged moveElements(classSet, Vector2 newLocation): Moves all filtered classes to coordinates specified.
    privileged orderElements(classSet, int priority): Sets the priority of the filtered elements.
    privileged configureElements(classSet, String configuration): Switches all filtered elements to specified configuration.
    [NOT IMPLEMENTED] privileged getClassSet(): Returns the classSet of the given id.
    privileged render(): Renders entire screen.
    [NOT IMPLEMENTED] privileged renderFiltered(classSet): Renders only the elements specified by classSet. (Does not affect if there are Elements with higher priority). 
    
    
Element [Abstract]:
  Simple base class for Layers within a Scene. Unlike with Scenes, the data can only be configured, but not modified.
  Members:
    public const Vector2 topLeftCoords: Top left coordinate relative to direct parent
    public const int priority: Used for determining order in ContainerLayers and Scenes. Low priority value is displayed on top. Default 0. 
  Methods:
    Constructor(data):
      data: See Layer constructor.
        priority: [TODO: Make optional, default to 0]
        topLeftCoords: [TODO: Make optional, default to new Vector2(0, 0)]
    public abstract copy(): Returns deep copy of the object, except for modules. 
    public virtual void SetConfiguration(String key): Does nothing, except for ConfigurationLayers and ContainerLayers
    [NOT IMPLEMENTED] privileged Array<String> getChildKeys: Returns an array of all keys of itself and all children. 

ContainerLayer:
  An Element which contains other Elements to be rendered. 
  Members:
    private const Array<Element> _children: 
    public const size: Number of Elements contained. 
  Methods:
    Constructor(children, data):
      Array<Element> children: Child elements. If they have the same priority, the last one will be rendered on top.
      data: See Element constructor
    public void setConfiguration(String key): Calls setConfiguration on all children. 
        
ConfigurationLayer:
  An Element which contains other Elements, of which only one is displayed at once. 
  Members:
    private const map<String, Element> _children: 
    public const size: Number of Elements contained. 
    public String activeElement: The id of the element currently being displayed. Will be initially set to defaultElement if not provided. 
    public String defaultElement: The default element. An undefined element from elements will be selected if no valid string is provided. 
  Methods:
    Constructor(children, data):
      Map<String, Element> children: 
      data: See Element constructor 
    public void setConfiguration: sets the activeElement string, and calls setConfiguration on all children. 
    
BaseLayer [Abstract]:
  An immutable layer which contains something to be rendered. 
  Members:
    
  Methods:
    Constructor(data):
      data: See constructor for Element

TextLayer:
  Standard layer for displaying Ascii drawings. 
  Members:
    public const text: The text to display. 
    public const Array rowIndices: Indices of every new line in the text. 
  Methods:
    Constructor(text, data):
      text: A string to display
      data: 
        FormattingSelection formatting: [NOT PROPERLY IMPLEMENTED YET]
        char setAsBlank: Picks a character to be replaced with blank when rendering. These characters will still take formatting. 
        bool spaceIsTransparent: If not, applies formatting (and events) to every character. 
        bool spaceHasFormatting: 
        bool leadingSpaceIgnored: If true, leadingSpace is always considered transparent.
    static object parseTextShape(String text): Parses text and returns shape data.

[NOT IMPLEMENTED] TextBox:
  Similar to TextLayer, but is formatted to fit within a specific boundary.
  Method:
    [NOT IMPLEMENTED] Constructor(data):
      [NOT IMPLEMENTED] data:
        [NOT IMPLEMENTED] String text: The text to display
        [NOT IMPLEMENTED] FormattingSelection formatting: See TextLayer input. 
        [NOT IMPLEMENTED] Vector2 dimens: The width and height cutoff. Set to 0 for no cutoff.

PixelData:
  Holds rendering information. 
  Members:
    Constructor(data):
      data: See fields below. 
    public const character char: The character to be displayed
    public const FormattingSelection formatting: The formatting associated with the character 
    public const EventContainer events: Holds the events to be rendered.
    public const ContainerReferences containers: Holds all Layer ancestors of the Element. 
  Methods:
    [NOT IMPLEMENTED] public static bool isEqual(PixelData p1, PixelData p2): Returns true if they are the exact same
    [NOT IMPLEMENTED] public const bool isTransparent: Returns true if no meaningful data there. 
    
FormattingSelection:
  Holds formatting information. Immutable after creation.
  Members:
    public const string textColor: Default "#000000".
    public const string backgroundColor: Default "transparent".
    public const string fontWeight: E.g. Bold. Default "normal".
    public const string fontStyle: E.g. Italics. Default "normal".
    public const string textDecoration: E.g. Underline, strikethrough. Default "normal".
  Methods:
    Constructor(data):
      data: Object with any of the five above fields. Set to default value if non-existent.
    public static bool isEqual(FormattingSelection f1, FormattingSelection f2): Returns true if the fields are equal. 
    public bool hasVisibleFormatting(): Returns true if has visible formatting (e.g. underline, background color). 

BaseModule [ABSTRACT]:
  Base class for all other modules. 
  Members:
    string type: A string to check what type the module is. undefined for BaseModule. 
    string layerId: The id of the layer which the module belongs to. 
  Methods:
    Constructor(layerId, )
    abstract static copy(other): Creates a deep copy

EventModule:
  Contains which events are attached to each Layer, and their status. 
  Members:
  
  Methods:
    Constructor(data):
      data:
        layerId [Mandatory]
  Members:
    [NOT IMPLEMENTED] public const function handler(eventInfo, ContainerReferences containers): The handler for the event.
      [NOT IMPLEMENTED] eventInfo: The information given when event is triggered. 
      [NOT IMPLEMENTED] ContainerReferences: the containers of the Element where the event is triggered. 
    private bool active: Whether or not the event is currently tied to a DOM element 
    [NOT IMPLEMENTED] private String id: The id which is used to trigger 
    
  Methods:
    [NOT IMPLEMENTED] Constructor(handler, data):

[NOT IMPLEMENTED] Parse:
  Collection of methods to generate Layer objects. 
  [NOT IMPLEMENTED] public static Object ReadFromFile(String filename): Reads text file and parses into a collection of layers. 

Vector2:
  A pair of two numbers. Immutable after being formed (no setters)
  Methods: 
    constructor(x, y): Constructs Vector2 from two integers. Defaults to 0. Error logged if non-integer. 
    public Vector2 copy(): Creates a copy of the Vector2-like object
    public Vector2 createFrom(): Creates a copy of the Vector2-like object, or returns new Vector2(0, 0) if not Vector2-like. 
    const int x: x value. Getter only.
    const int y: y value. Getter only. 
    public bool inBoundingBox(topLeftCoords, boundingBoxDimens): Returns true if the vector is in the bounding box
      determined by topLeftCoords and boundingBox. 
    public static const Vector2 add(v1, v2): Returns new Vector2 which adds respective values
    public static const Vector2 subtract(v1, v2): Same as Add, but subtracts. 
    public static const Vector2 dot(v1, v2): Returns new Vector2 with dot product.  
    public static const Vector2 takeTopLeft(v1, v2): Returns a Vector2 taking the minimum of the x,y coordinates. 
    public static const Vector2 takeBottomRight(v1, v2): Returns a Vector2 taking the maximum of the x,y coordinates. 
    public static const bool isInteger(Vector2 v): Checks to make sure other.x and other.y are integers. 
    public static const bool verify(Vector2-like v): Returns true if v can be interpreted as a Vector2. 
    
LOGGING:
  A simple wrapper around console.log/warn/error/assert. 
  These are to determine what information AsciiEngine prints. Runtime errors will still appear regardless of theses settings. 
  Changed by accessing LOGGING.STATUS. E.g. LOGGING.STATUS.ERROR = false;
  ERROR: Bad behavior. Will probably cause crash quickly. Default true.
  WARN: Unexpected behavior but will not immediately cause a crash. Default true.
  LOG: Short messages describing execution. Default false. 
  DEBUG: Prints out the state of the object during execution. Default false. 
  DEBUG_VERBOSE: Prints out repeated log statements. 
  Performance: Prints out various performance values. 
