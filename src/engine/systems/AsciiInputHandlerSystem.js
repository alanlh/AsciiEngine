import System from "./System.js";
import ModuleSlots from "../modules/ModuleSlots.js";

/**
 * Handles events from mouse and keyboard
 * Mouse events are sent by AsciiGL. 
 * This system should only be used with AsciiGL as the graphics library.
 * 
 * Allows for focusing, 
 */
export default class AsciiInputHandlerSystem extends System {
  constructor(name) {
    super(name || "AsciiInputHandler");
    this.mouseEventsEnabled = false;
    this.keyboardEventsEnabled = false;
  }

  startup() {
    let asciiGl = this.getEngine().getModule(ModuleSlots.Graphics);
    if (asciiGl !== undefined) {
      asciiGl.setHandler(this._mouseEventHandler.bind(this));
      this.mouseEventsEnabled = true;
    }

    let keyboardInputModule = this.getEngine().getModule(ModuleSlots.KeyboardInput);
    if (keyboardInputModule !== undefined) {
      keyboardInputModule.addEventListener(this._keyboardEventHandler.bind(this));
      this.keyboardEventsEnabled = true;
    }
  }

  /**
   * Receives mouse input messages from AsciiGL and forwards them to the System Message Board.
   * The event descriptor always begins with ["MouseEvent", eventType].
   * If there is a named target being clicked, it will be appended.
   * 
   * @param {MouseEvent} event The MouseEvent object generated by the browser
   * @param {string} target The target element's name, if defined
   * @param {string} type The event type
   * @param {{x: number, y: number}} coords The location of the mouse event on the screen.
   */
  _mouseEventHandler(event, type, target, coords) {
    let eventDescriptor = (target !== undefined) ? [
      "MouseEvent", type, target
    ] : [
      "MouseEvent", type
    ];
    this.postMessage(
      eventDescriptor,
      {
        event: event,
        coords: coords,
      },
    );
  }

  /**
   * Receives keyboard events from KeyboardInputModule and forwards them to the System Message Board
   * The event descriptor is 
   * ["KeyboardEvent", eventType [, key category[, key subcategory...]], event.key]
   * Current key categories include:
   * Visible: Any visible character
   *    - Alphabetical: a-z A-Z
   *      - Lower: a-z
   *      - Upper: A-Z
   *    - Numeric: 0-9
   *    - Symbol: Everything else
   * Arrow: One of the four arrow keys
   * 
   * @param {string} eventName The type of event
   * @param {string} eventKey The name of the key that triggered the event
   * @param {KeyboardEvent} event The event object generated by the browser.
   */
  _keyboardEventHandler(eventName, eventKey, event) {
    let eventDescriptor = undefined;
    if (eventKey.length === 1) {
      let keyCode = eventKey.charCodeAt(0);
      if (keyCode >= 48 && keyCode <= 57) {
        eventDescriptor = ["KeyboardEvent", eventName, "Visible", "Numeric", eventKey];
      } else if (keyCode >= 65 && keyCode <= 90) {
        eventDescriptor = ["KeyboardEvent", eventName, "Visible", "Alphabetical", "Upper", eventKey];
      } else if (keyCode >= 97 && keyCode <= 122) {
        eventDescriptor = ["KeyboardEvent", eventName, "Visible", "Alphabetical", "Lower", eventKey];
      } else {
        eventDescriptor = ["KeyboardEvent", eventName, "Visible", "Symbol", eventKey];
      }
      eventDescriptor = ["KeyboardEvent", eventName, "Visible", eventKey]
    } else if (eventKey.startsWith("Arrow")) {
      eventDescriptor = ["KeyboardEvent", eventName, "Arrow", eventKey];
    } else {
      eventDescriptor = ["KeyboardEvent", eventName, eventKey]
    }
    this.postMessage(
      eventDescriptor,
      event
    )
  }
}